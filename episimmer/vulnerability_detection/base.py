from episimmer.read_file import ReadAgents


# Agent Vulnerability Detection
class AgentVD():
    def __init__(self):
        self.agent_scores = {}

    def init_scores(self):
        agents_obj = ReadAgents(self.world_obj.agents_filename,
                                self.world_obj.config_obj)
        for agent_index in agents_obj.agents.keys():
            self.agent_scores[agent_index] = 0.0

    def one_run(self, *args, **kwargs):
        raise NotImplementedError

    def update_agent_scores(self, *args, **kwargs):
        raise NotImplementedError

    def run_detection(self):
        raise NotImplementedError

    def get_max_score_agents(self, n):
        res_max = dict(
            sorted(self.agent_scores.items(),
                   key=lambda x: (x[1], x[0]),
                   reverse=True)[:n])
        return res_max

    def get_min_score_agents(self, n):
        res_min = dict(
            sorted(self.agent_scores.items(), key=lambda x: (x[1], x[0]))[:n])
        return res_min

    def print_default_output(self, n):
        print(self.get_max_score_agents(n))
        print(self.get_min_score_agents(n))


class VulnerableAgent(AgentVD):
    def __init__(self):
        super().__init__()
        self.type = 'Vulnerable Agents'


class AgentVulnerability(AgentVD):
    def __init__(self):
        super().__init__()
        self.type = 'Agent Vulnerability'

    def remove_agents(self, *args, **kwargs):
        raise NotImplementedError


class EventVD:
    def __init__(self):
        self.event_scores = {}

    def init_scores(self):
        raise NotImplementedError

    def one_run(self, *args, **kwargs):
        raise NotImplementedError

    def update_event_scores(self, *args, **kwargs):
        raise NotImplementedError

    def run_detection(self):
        raise NotImplementedError

    def get_max_score_events(self, n):
        res_max = {
            key: round(value, 4)
            for key, value in sorted(self.event_scores.items(),
                                     key=lambda x: (x[1], x[0]),
                                     reverse=True)[:n]
        }
        return res_max

    def get_min_score_events(self, n):
        res_min = {
            key: round(value, 4)
            for key, value in sorted(self.event_scores.items(),
                                     key=lambda x: (x[1], x[0]))[:n]
        }

        return res_min

    def print_default_output(self, n):
        print(self.get_max_score_events(n))
        print(self.get_min_score_events(n))


class EventVulnerability(EventVD):
    def __init__(self):
        super().__init__()
        self.type = 'Event Vulnerability'

    def select_event(self, *args, **kwargs):
        raise NotImplementedError
