import sys
sys.path.insert(1, '../src/')
import ReadFile
import pickle
import World
import importlib.util
import os.path as osp

class Read_Example():
    def __init__(self,example_path):
        self.path=example_path

        config_filename = self.get_config_path()

        # Read Config file using ReadFile.ReadConfiguration
        config_obj=ReadFile.ReadConfiguration(config_filename)

        agents_filename, interactions_FilesList_filename,\
        events_FilesList_filename, locations_filename = self.get_file_paths(config_obj)
        interactions_files_list, events_files_list = self.get_file_names_list(interactions_FilesList_filename,events_FilesList_filename,config_obj)

        # User Model and Policy
        model = self.get_model()
        policy_list, event_restriction_fn=self.get_policy()

        # Creation of World object
        self.world_obj = World.World(config_obj,model,policy_list,event_restriction_fn,agents_filename,interactions_files_list,locations_filename,events_files_list)


    def module_from_file(self,module_name, file_path):
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module

    def get_config_path(self):
        config_filepath=osp.join(self.path,'config.txt')
        return config_filepath


    def get_file_paths(self,config_obj):
        # File Names
        locations_filename=None
        agents_filename=osp.join(self.path,config_obj.agents_filename)
        interactions_FilesList_filename=osp.join(self.path,config_obj.interactions_files_list)
        events_FilesList_filename=osp.join(self.path,config_obj.events_files_list)
        if config_obj.locations_filename=="":
        	locations_filename=None
        else:
        	locations_filename=osp.join(self.path,config_obj.locations_filename)

        return agents_filename, interactions_FilesList_filename, events_FilesList_filename, locations_filename


    def get_file_names_list(self,interactions_FilesList_filename,events_FilesList_filename,config_obj):
        # Reading through a file (for interactions/events) that contain file names which contain interactions and event details for a time step

        interactions_files_list=None
        events_files_list=None

        if config_obj.interactions_files_list=='':
        	print('No Interaction files uploaded!')
        else:
        	interactionFiles_obj=ReadFile.ReadFilesList(interactions_FilesList_filename)
        	interactions_files_list=list(map(lambda x : osp.join(self.path,x) ,interactionFiles_obj.file_list))
        	if interactions_files_list==[]:
        		print('No Interactions inputted')


        if config_obj.events_files_list=='':
        	print('No Event files uploaded!')
        else:
        	eventFiles_obj=ReadFile.ReadFilesList(events_FilesList_filename)
        	events_files_list=list(map(lambda x : osp.join(self.path,x) ,eventFiles_obj.file_list))
        	if events_files_list==[]:
        		print('No Events inputted')

        return interactions_files_list, events_files_list

    def get_model(self):
        UserModel = self.module_from_file("Generate_model", osp.join(self.path,'UserModel.py'))
        model = UserModel.UserModel()
        return model

    def get_policy(self):
        Generate_policy = self.module_from_file("Generate_policy", osp.join(self.path,'Generate_policy.py'))
        policy_list, event_restriction_fn=Generate_policy.generate_policy()
        return policy_list, event_restriction_fn
