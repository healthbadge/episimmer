import sys
import os.path as osp
import Read_Example
import Algorithm
import matplotlib.pyplot as plt

def get_example_path():
    return sys.argv[1]


if __name__=="__main__":
    path=get_example_path()
    read_obj=Read_Example.Read_Example(path)

    states1 = ["Infected", "Recovered"]
    states2 = ["Exposed", "Infected", "Recovered"]

    # Vulnerability Detection - Type  2
    # mc_obj = Algorithm.Agent_Vulnerabilities_MC(read_obj)
    # mc_obj.do_MC(50, 1, states2)
    # print(mc_obj.get_maximum_agent_vulnerability(10))
    # print(mc_obj.get_minimum_agent_vulnerability(10))

    # Vulnerability Detection - Type  2.2
    mc_obj = Algorithm.BanditAlgos(read_obj, states2)
    mc_obj.do_MC(10)
    print(mc_obj.get_maximum_agent_vulnerability(10))
    print(mc_obj.get_minimum_agent_vulnerability(10))
    #
    # m1 = mc_obj.get_maximum_agent_vulnerability(10)
    # m2 = mc_obj.get_minimum_agent_vulnerability(10)
    # maxim = max(m1.values())
    # minim = min(m2.values())
    # diff =  maxim - minim
    # print("Max - " + str(maxim), "Min - " + str(minim))
    # print("MaxMinDiff - " + str(diff))
    # print("Variance - " + str(diff/maxim*100))

    #### Plot
    ### Scores Plot
    """
    if(mc_obj.type == "Vulnerable Agents"):
        D = mc_obj.get_maximum_vulnerable_agents(10)
    elif(mc_obj.type == "Agent Vulnerabilities"):
        D = mc_obj.get_maximum_agent_vulnerability(10)

    plt.bar(range(len(D)), list(D.values()), align='center')
    plt.xticks(range(len(D)), list(D.keys()))
    plt.show()
    """
    ### Graph post removal
    # Algorithm.plot_graph_post_removal(read_obj, [])
