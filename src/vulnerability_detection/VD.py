from vulnerability_detection import Agent_VD_algorithms

class VD():
    def __init__(self, vd_config_obj, world_obj):
        self.vd_config_obj = vd_config_obj
        self.world_obj = world_obj

    def get_algorithm(self):
        algorithm_class = None
        return algorithm_class

    def run_output(self):
        pass

    def run_vul_detection(self):
        algorithm = get_algorithm(self.vd_config_obj)
        algorithm.run_detection()

    def test_run_vul_detection(self):
        """
        Only for testing!
        """
        # mc_obj=Agent_VD_algorithms.Vulnerable_Agent_MC1(self.world_obj, ['Infected'], 100)
        # mc_obj.run_detection()
        # print(mc_obj.get_maximum_vulnerable_agents(10))
        # print(mc_obj.get_minimum_vulnerable_agents(10))

        # mc_obj = Agent_VD_algorithms.Vulnerable_Agent_MC2(self.world_obj, ['Infected'], 100)
        # mc_obj.run_detection()
        # print(mc_obj.get_maximum_vulnerable_agents(10))
        # print(mc_obj.get_minimum_vulnerable_agents(10))

        # mc_obj = Agent_VD_algorithms.Agent_Vulnerabilities_MC(self.world_obj, ['Infected'], 100, 1)
        # mc_obj.run_detection()
        # print(mc_obj.get_maximum_agent_vulnerability(10))
        # print(mc_obj.get_minimum_agent_vulnerability(10))

        # mc_obj = Agent_VD_algorithms.Agent_Vulnerabilities_MC2(self.world_obj, ['Infected'], 100, 1)
        # mc_obj.run_detection()
        # print(mc_obj.get_maximum_agent_vulnerability(10))
        # print(mc_obj.get_minimum_agent_vulnerability(10))

        mc_obj = Agent_VD_algorithms.BanditAlgos(self.world_obj, ["Infected"], 100, "USB")
        mc_obj.run_detection()
        print(mc_obj.get_maximum_agent_vulnerability(10))
        print(mc_obj.get_minimum_agent_vulnerability(10))
